package searchengine.services;
import org.jsoup.Jsoup;
import org.jsoup.nodes.Document;
import org.jsoup.nodes.Element;
import org.jsoup.select.Elements;
import org.springframework.stereotype.Service;
import searchengine.config.ConfigSite;
import searchengine.model.Page;
import searchengine.model.Site;
import searchengine.model.Status;
import searchengine.repository.PageRepository;
import searchengine.repository.SiteRepository;

import java.io.IOException;
import java.time.LocalDateTime;
import java.util.List;
import java.util.Set;
import java.util.concurrent.*;

@Service
public class IndexingService {
    private static final int THREAD_POOL_SIZE = 10;
    private final SiteRepository siteRepository;
    private final PageRepository pageRepository;
    private final Set<String> visitedUrls;

    public IndexingService(SiteRepository siteRepository, PageRepository pageRepository) {
        this.siteRepository = siteRepository;
        this.pageRepository = pageRepository;
        this.visitedUrls = ConcurrentHashMap.newKeySet();
    }

    public boolean startIndexing(List<ConfigSite> configSites) throws InterruptedException {
        if (isIndexingInProgress()) {
            return false;
        }
        pageRepository.deleteAll();
        siteRepository.deleteAll();
        ForkJoinPool forkJoinPool = new ForkJoinPool(THREAD_POOL_SIZE);
        for (ConfigSite configSite : configSites) {
            Site site = new Site();
            site.setUrl(configSite.getUrl());
            site.setName(configSite.getName());
            site.setStatus(Status.INDEXING);
            site.setStatusTime(LocalDateTime.now());
            siteRepository.save(site);
            forkJoinPool.execute(new IndexSiteTask(site));
        }
        forkJoinPool.shutdown();
        forkJoinPool.awaitTermination(Long.MAX_VALUE, TimeUnit.NANOSECONDS);
        return true;
    }

    private class IndexSiteTask extends RecursiveAction {
        private final Site site;

        public IndexSiteTask(Site site) {
            this.site = site;
        }

        @Override
        protected void compute() {
            try {
                indexSite(site);
            } catch (InterruptedException e) {
                e.printStackTrace();
            }
        }
    }

    private void indexSite(Site site) throws InterruptedException {
        try {
            Long start = System.currentTimeMillis();
            pageCrawler(site.getUrl(), site);
            System.out.println("Индексация " + site.getUrl() + " " + ((System.currentTimeMillis() - start) / 1000f) + " sec");
            site.setStatus(Status.INDEXED);
        } catch (IOException e) {
            site.setStatus(Status.FAILED);
            site.setLastError(e.getMessage());
        } finally {
            site.setStatusTime(LocalDateTime.now());
            siteRepository.save(site);
        }
    }

    private void pageCrawler(String url, Site site) throws IOException, InterruptedException {
        if (!visitedUrls.contains(url)) {
            visitedUrls.add(url);
            savePage(site, url);
            Document doc = Jsoup.connect(url).get();
            Elements links = doc.select("a[href]");
            for (Element link : links) {
                String absUrl = link.absUrl("href");
                if (absUrl.startsWith(site.getUrl())) {
                    pageCrawler(absUrl, site);
                }
            }
        }
    }

    private void savePage(Site site, String url) {
        try {
            Document doc = Jsoup.connect(url).get();
            String path = url.substring(site.getUrl().length());
            String content = doc.toString();
            Page page = new Page();
            page.setSite(site);
            page.setPath(path);
            page.setCode(200);
            page.setContent(content);
            pageRepository.save(page);
        } catch (IOException e) {
            e.printStackTrace();
        }
    }

    private boolean isIndexingInProgress() {
        List<Site> sites = siteRepository.findByStatus(Status.INDEXING);
        return !sites.isEmpty();
    }

    public void stopIndexing() {
        ForkJoinPool.commonPool().shutdownNow();
        List<Site> sites = siteRepository.findByStatus(Status.INDEXING);
        for (Site site : sites) {
            site.setStatus(Status.FAILED);
            site.setStatusTime(LocalDateTime.now());
            siteRepository.save(site);
        }
    }

    private class PageCrawlerTask extends RecursiveAction {
        private final Elements links;
        private final Site site;

        public PageCrawlerTask(Elements links, Site site) {
            this.links = links;
            this.site = site;
        }

        @Override
        protected void compute() {
            for (Element link : links) {
                String absUrl = link.absUrl("href");
                if (absUrl.contains(site.getUrl())) {
                    try {
                        pageCrawler(absUrl, site);
                    } catch (IOException | InterruptedException e) {
                        throw new RuntimeException(e);
                    }
                }
            }
        }
    }
}

