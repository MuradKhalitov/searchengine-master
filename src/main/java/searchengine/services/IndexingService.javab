package searchengine.services;

import java.io.IOException;
import java.time.LocalDateTime;
import java.util.HashSet;
import java.util.List;
import java.util.Set;
import java.util.concurrent.ForkJoinPool;
import java.util.concurrent.RecursiveAction;

import org.jsoup.Jsoup;
import org.jsoup.nodes.Document;
import org.jsoup.nodes.Element;
import org.jsoup.select.Elements;
import org.springframework.stereotype.Service;
import searchengine.config.ConfigSite;
import searchengine.model.Page;
import searchengine.model.Site;
import searchengine.model.Status;
import searchengine.repository.PageRepository;
import searchengine.repository.SiteRepository;

@Service
public class IndexingService {
    private final SiteRepository siteRepository;
    private final PageRepository pageRepository;
    private final ForkJoinPool forkJoinPool;
    private Set<String> visitedUrls;

    public IndexingService(SiteRepository siteRepository, PageRepository pageRepository) {
        this.siteRepository = siteRepository;
        this.pageRepository = pageRepository;
        this.forkJoinPool = new ForkJoinPool(); // Создание Fork-Join Pool
    }

    public boolean startIndexing(List<ConfigSite> configSites) {
        if (isIndexingInProgress()) {
            return false;
        }
        pageRepository.deleteAll();
        siteRepository.deleteAll();
        Long start = System.currentTimeMillis();
        visitedUrls = new HashSet<>();
        for (ConfigSite configSite : configSites) {
            Site site = new Site();
            site.setUrl(configSite.getUrl());
            site.setName(configSite.getName());
            site.setStatus(Status.INDEXING);
            site.setStatusTime(LocalDateTime.now());
            siteRepository.save(site);
            forkJoinPool.invoke(new IndexSiteTask(site)); // Запуск задачи на индексирование сайта в Fork-Join Pool
            System.out.println("Индексация " + site.getUrl() + " " + ((System.currentTimeMillis() - start) / 1000f) + " sec");
        }

        return true;
    }

    private boolean isIndexingInProgress() {
        List<Site> sites = siteRepository.findByStatus(Status.INDEXING);
        return !sites.isEmpty();
    }

    private class IndexSiteTask extends RecursiveAction {
        private final Site site;

        public IndexSiteTask(Site site) {
            this.site = site;
        }

        @Override
        protected void compute() {
            try {
                String baseUrl = site.getUrl();
                site.setStatus(Status.INDEXED);
                site.setStatusTime(LocalDateTime.now());
                siteRepository.save(site);
                pageCrawler(baseUrl, site);
            } catch (IOException e) {
                handleIndexingError(e.getMessage());
            }
        }

        private void pageCrawler(String url, Site site) throws IOException {
            if (!visitedUrls.contains(url)) {
                visitedUrls.add(url);
                savePage(site, url);

                Document doc = Jsoup.connect(url).get();
                Elements links = doc.select("a[href]");
                for (Element link : links) {
                    String absUrl = link.absUrl("href");
                    //if (!absUrl.isEmpty() && absUrl.startsWith("http://") || absUrl.startsWith("https://")) {
                    if (absUrl.contains(site.getUrl())) {
                        forkJoinPool.execute(new IndexSiteTask(site)); // Рекурсивный запуск задачи в Fork-Join Pool
                    }
                    // }
                }
            }
        }

        private void savePage(Site site, String url) {
            try {
                Document doc = Jsoup.connect(url).get();
                String path = url.substring(site.getUrl().length());
                String content = doc.toString();

                Page page = new Page();
                page.setSite(site);
                page.setPath(path);
                page.setCode(200);
                page.setContent(content);
                pageRepository.save(page);
            } catch (IOException e) {
                handleIndexingError(e.getMessage());
            }
        }

        private void handleIndexingError(String errorMessage) {
            site.setStatus(Status.FAILED);
            site.setStatusTime(LocalDateTime.now());
            site.setLastError(errorMessage);
            siteRepository.save(site);
        }
    }

    public void stopIndexing() {
        forkJoinPool.shutdownNow();
        List<Site> sites = siteRepository.findByStatus(Status.INDEXING);
        for (Site site : sites) {
            site.setStatus(Status.FAILED);
            site.setStatusTime(LocalDateTime.now());
            siteRepository.save(site);
        }
    }
}

